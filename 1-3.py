# основы языка программирования Python
# условные конструкции. операции сравнения
#Задание «Стоимость доставки»
#Условие задачи
#Магазин «Шестёрочка» проводит конкурс, где победителем станет каждый третий покупатель.
# Выведите номера чеков победителей из списка чеков receipts и посчитайте их количество.
#receipts = [123, 145, 346, 246, 235, 166, 112, 351, 436]

import pytest
def solve(receipts: list):
    result = receipts [2:10:3] # получите правильный срез списка receipts
    return result, len(result) # этот код менять не нужно

@pytest.mark.parametrize("receipts, expected_result, expected_count",
[
    # Основной тест из примера
    ([123, 145, 346, 246, 235, 166, 112, 351, 436], [346, 166, 436], 3),
    # Пустой список
    ([], [], 0),
    # Список с недостаточным количеством элементов (меньше 3)
    ([123, 145], [], 0),
    # Список с 3 элементами (берет только 2-й элемент)
    ([100, 200, 300], [300], 1),
    # Список с 5 элементами (берет 2-й и 5-й элементы, но 5-й выходит за границы)
    ([10, 20, 30, 40, 50], [30], 1),
    # Список с 6 элементами (берет 2-й и 5-й элементы)
    ([11, 22, 33, 44, 55, 66], [33, 55], 2),
    # Список с 9 элементами (как в основном примере)
    ([1, 2, 3, 4, 5, 6, 7, 8, 9], [3, 6, 9], 3),
    # Список с 10 элементами (берет 2-й, 5-й, 8-й элементы)
    ([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 5, 8], 3),
])
def test_solve(receipts, expected_result, expected_count):
    result, count = solve(receipts)
    assert result == expected_result, f"Список чеков неверный: {result}"
    assert count == expected_count, f"Количество чеков неверное: {count}"